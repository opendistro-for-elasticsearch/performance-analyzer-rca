syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc";
option java_outer_classname = "PANetworking";

import "google/protobuf/descriptor.proto";

package com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc;

service InterNodeRpcService {
    // Sends a flowunit to whoever is interested in it.
    rpc Publish (stream FlowUnitMessage) returns (PublishResponse) {
    }

    // Sends a subscription request to a node for a particular metric.
    rpc Subscribe (SubscribeMessage) returns (SubscribeResponse) {
    }

    // get Metrics for a particular node
    rpc GetMetrics(MetricsRequest) returns (MetricsResponse) {}
}

/*
 Structure that describes the subscription message.
*/
message SubscribeMessage {
    string requester_node = 1;
    string destination_node = 2;
    map<string, string> tags = 3;
}

message SubscribeResponse {
    enum SubscriptionStatus {
        SUCCESS = 0;
        TAG_MISMATCH = 1;
    }
    SubscriptionStatus subscription_status = 1;
}

/*
 ResourceContext that comes along with ResourceFlowUnit
*/
message ResourceContextMessage {
    int32 state = 1;
}

/*
  Enum for different resource type
*/
message ResourceTypeOptions {
  string resourceTypeName = 1;
  string resourceTypeUnit = 2;
}

extend google.protobuf.EnumValueOptions {
  ResourceTypeOptions resourceTypeOptions = 50000;
}

enum JvmEnum {
  OLD_GEN = 0 [(resourceTypeOptions).resourceTypeName = "old gen", (resourceTypeOptions).resourceTypeUnit = "heap usage in percentage"];
  YOUNG_GEN = 1 [(resourceTypeOptions).resourceTypeName = "young gen", (resourceTypeOptions).resourceTypeUnit = "promotion rate in mb/s"];
}

enum HardwareEnum {
  CPU = 0 [(resourceTypeOptions).resourceTypeName = "cpu usage", (resourceTypeOptions).resourceTypeUnit = "cpu usage in percentage"];
}

/*
  message for resource type Enum
*/
message ResourceType {
    oneof resource_type_oneof {
      JvmEnum JVM = 1;
      HardwareEnum hardware_resource_type = 2;
    }
}

/*
 message wrappers for different types of RCA summary
*/
message TopConsumerSummaryList {
    repeated TopConsumerSummaryMessage consumer = 1;
}
message HotResourceSummaryList {
    repeated HotResourceSummaryMessage hotResourceSummary = 1;
}
message HotNodeSummaryList {
    repeated HotNodeSummaryMessage hotNodeSummary = 1;
}
message TopConsumerSummaryMessage {
    string name = 1;
    double value = 2;
}
message HotResourceSummaryMessage {
    ResourceType resourceType = 1;
    TopConsumerSummaryList consumers = 2;
    double threshold = 3;
    double value = 4;
    double avgValue = 5;
    double minValue = 6;
    double maxValue = 7;
    int32 timePeriod = 8;
}
message HotNodeSummaryMessage {
    string nodeID = 1;
    string hostAddress = 2;
    HotResourceSummaryList hotResourceSummaryList = 3;
}
message HotClusterSummaryMessage {
    int32 nodeCount = 1;
    HotNodeSummaryList hotNodeSummaryList = 2;
}

message ResourceTemperatureMessage {
    string resourceName = 1;
    // The mean usage is the mean over all shards. There is also a shard independent component
    // that is accounted for in the hte totalUsage
    int32 meanUsage = 2;
    int32 numberOfShards = 3;
    double totalUsage = 4;
}

message NodeTemperatureSummaryMessage {
    string nodeID = 1;
    string hostAddress = 2;
    repeated ResourceTemperatureMessage cpuTemperature = 3;
}

/*
 gRPC message wrapper for ResourceFlowUnit
*/
message FlowUnitMessage {
    string graphNode = 1;
    string esNode = 2;
    uint64 timeStamp = 3;
    ResourceContextMessage resourceContext = 4;
    oneof summary_oneof {
        HotResourceSummaryMessage hotResourceSummary = 5;
        HotNodeSummaryMessage hotNodeSummary =6;
        HotClusterSummaryMessage hotClusterSummary = 7;
        NodeTemperatureSummaryMessage nodeTemperatureSummary = 8;
    }
}

message PublishResponse {
    enum PublishResponseStatus {
        SUCCESS = 0;
        NODE_SHUTDOWN = 1;
    }
    PublishResponseStatus data_status = 1;
}

/*
 Request Parameters for GetMetrics API
*/
message MetricsRequest {
    repeated string metric_list = 1;
    repeated string agg_list = 2;
    repeated string dim_list = 3;
}

/*
 GetMetrics function returns string as a response
*/
message MetricsResponse {
    string metrics_result = 1;
}